/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ambaltextiles;

import ambaltextiles.databaseWorks.DatabaseFunctions;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStamper;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sridhar
 */
public class Bill extends javax.swing.JFrame {

    DefaultTableModel dm;
    DefaultTableCellRenderer centerRenderer;
    ButtonGroup bg = new ButtonGroup();
    PdfReader reader;
    DecimalFormat df, ddf;
    DatabaseFunctions dataFunc;

    String[] head;
    Double total = 0.00, cgstAmount = 0.00, sgstAmount = 0.00, igstAmount = 0.00, netAmount = 0.00;
    Double totalPcs = 0.0, totalMtr = 0.0;
    int addCount = 0;
    boolean flag = false, flag1 = false, flag2 = false, flag3 = false, flag4 = true, flag5 = true, flag6 = true, flag7 = true;
    String[] prod, qua, pcs, mtr, rate, amnt;
    String customerName;

    /**
     * Creates new form Bill
     */
    public Bill() {
        dm = new DefaultTableModel(0, 0); // setting default model of the table

        initComponents();

        prod = new String[20];
        qua = new String[20];
        pcs = new String[20];
        mtr = new String[20];
        rate = new String[20];
        amnt = new String[20];
        for (int i = 0; i < 20; i++) {
            prod[i] = "";
            qua[i] = "";
            pcs[i] = "";
            mtr[i] = "";
            rate[i] = "";
            amnt[i] = "";
        }

        add.setEnabled(true);

        bg.add(cgst_sgst);
        bg.add(igst);
        bg.add(noTax);

        head = new String[]{"NO.", "PRODUCT", "QUALITY", "QUANTITY", "RATE", "AMOUNT"}; // declare header fields
        dm.setColumnIdentifiers(head);

        table.getColumnModel().getColumn(0).setPreferredWidth(100);
        table.getColumnModel().getColumn(1).setPreferredWidth(100);
        table.getColumnModel().getColumn(2).setPreferredWidth(100);
        table.getColumnModel().getColumn(3).setPreferredWidth(150);
        table.getColumnModel().getColumn(4).setPreferredWidth(100);
        table.getColumnModel().getColumn(5).setPreferredWidth(200);

        // formatting data in cells as center
        centerRenderer = new DefaultTableCellRenderer(); // instance of the DefaultTableCellRenderer
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER); // formatting cell element as center for horizontalAlignment
        // applying the above format to all cells in table
        table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        table.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        table.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        table.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        table.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
        table.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        billWindow = new javax.swing.JLabel();
        pieces = new javax.swing.JTextField();
        amountPerPiece = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        add = new javax.swing.JButton();
        l = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        clear = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        invoiceDate = new org.jdesktop.swingx.JXDatePicker();
        saveAsPDF = new javax.swing.JLabel();
        closeButton = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        cgst_sgst = new javax.swing.JRadioButton();
        igst = new javax.swing.JRadioButton();
        noTax = new javax.swing.JRadioButton();
        transport = new javax.swing.JTextField();
        place = new javax.swing.JTextField();
        mode = new javax.swing.JTextField();
        baleNumber = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        hsn = new javax.swing.JTextField();
        seeInvoiceNumber = new javax.swing.JLabel();
        customerDetails = new javax.swing.JComboBox<>();
        searchText = new javax.swing.JTextField();
        searchButton = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        invoiceNumber = new javax.swing.JTextField();
        product = new javax.swing.JTextField();
        quality = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        metres = new javax.swing.JTextField();
        clearAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(47, 93, 129));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(255, 255, 255)));

        billWindow.setFont(new java.awt.Font("Supercell-Magic", 0, 18)); // NOI18N
        billWindow.setForeground(new java.awt.Color(255, 255, 255));
        billWindow.setText("Billing Window");

        pieces.setToolTipText("Pieces");

        amountPerPiece.setToolTipText("Rate");

        table.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        table.setModel(dm);
        table.setToolTipText("Products Table");
        table.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        table.setEnabled(false);
        table.setRowHeight(25);
        table.setRowSelectionAllowed(false);
        table.getTableHeader().setResizingAllowed(false);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);
        table.getAccessibleContext().setAccessibleName("");

        add.setFont(new java.awt.Font("Supercell-Magic", 0, 10)); // NOI18N
        add.setText("Add");
        add.setToolTipText("Add Purchasing Product");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        l.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        l.setForeground(new java.awt.Color(255, 255, 255));
        l.setText("Rs 0.0");
        l.setToolTipText("Gross Total");

        jLabel2.setFont(new java.awt.Font("Supercell-Magic", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("PRODUCT");

        jLabel3.setFont(new java.awt.Font("Supercell-Magic", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("QUALITY");

        jLabel4.setFont(new java.awt.Font("Supercell-Magic", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("PIECES");

        jLabel5.setFont(new java.awt.Font("Supercell-Magic", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Rate");

        clear.setFont(new java.awt.Font("Supercell-Magic", 0, 10)); // NOI18N
        clear.setText("Clear");
        clear.setToolTipText("Clear Details");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Supercell-Magic", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("INVOICE NUMBER");

        jLabel6.setFont(new java.awt.Font("Supercell-Magic", 0, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("INVOICE DATE");

        invoiceDate.setToolTipText("Invoice Date");

        saveAsPDF.setFont(new java.awt.Font("Supercell-Magic", 0, 14)); // NOI18N
        saveAsPDF.setForeground(new java.awt.Color(255, 255, 255));
        saveAsPDF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ambaltextiles/images/file.png"))); // NOI18N
        saveAsPDF.setText("Save As PDF");
        saveAsPDF.setToolTipText("Save As PDF Buton");
        saveAsPDF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveAsPDFMouseClicked(evt);
            }
        });

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ambaltextiles/images/close.png"))); // NOI18N
        closeButton.setToolTipText("Close");
        closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeButtonMouseClicked(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Supercell-Magic", 0, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("CUSTOMER DETAILS");

        jLabel11.setFont(new java.awt.Font("Supercell-Magic", 0, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("TRANSPORT");

        jLabel12.setFont(new java.awt.Font("Supercell-Magic", 0, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("PLACE");

        jLabel13.setFont(new java.awt.Font("Supercell-Magic", 0, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("MODE");

        jLabel14.setFont(new java.awt.Font("Supercell-Magic", 0, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("BALE NUMBER");

        cgst_sgst.setFont(new java.awt.Font("Supercell-Magic", 0, 10)); // NOI18N
        cgst_sgst.setText("CGST + SGST");
        cgst_sgst.setToolTipText("CGST & SCST Bill");

        igst.setFont(new java.awt.Font("Supercell-Magic", 0, 10)); // NOI18N
        igst.setText("IGST");
        igst.setToolTipText("IGST Bill");

        noTax.setFont(new java.awt.Font("Supercell-Magic", 0, 10)); // NOI18N
        noTax.setText("TAXLESS");
        noTax.setToolTipText("Taxless BIll");

        transport.setToolTipText("Transport Company Name");

        place.setToolTipText("Place of Transport");

        mode.setToolTipText("Mode of Transport");

        baleNumber.setToolTipText("Bale Number");

        jLabel16.setFont(new java.awt.Font("Supercell-Magic", 0, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("HSN");

        hsn.setToolTipText("HSN");

        seeInvoiceNumber.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ambaltextiles/images/see.png"))); // NOI18N
        seeInvoiceNumber.setToolTipText("Invoice Number Info");
        seeInvoiceNumber.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                seeInvoiceNumberMouseClicked(evt);
            }
        });

        customerDetails.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        customerDetails.setToolTipText("Customer Name/ Company Name");

        searchText.setToolTipText("Search Bar");

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ambaltextiles/images/search.png"))); // NOI18N
        searchButton.setToolTipText("Search Icon");
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchButtonMouseClicked(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Supercell-Magic", 0, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("SEARCH BY NAME");

        invoiceNumber.setToolTipText("Invoice Number");

        product.setToolTipText("Product");

        quality.setToolTipText("Quality");

        jLabel9.setFont(new java.awt.Font("Supercell-Magic", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("METRES");

        metres.setToolTipText("Metres");

        clearAll.setFont(new java.awt.Font("Supercell-Magic", 0, 10)); // NOI18N
        clearAll.setText("CLEAR ALL");
        clearAll.setToolTipText("Clear All Details");
        clearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(billWindow)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeButton)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(customerDetails, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel8))
                                        .addGap(20, 20, 20)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(searchButton))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(invoiceDate, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                                                    .addComponent(invoiceNumber))
                                                .addGap(18, 18, 18)
                                                .addComponent(seeInvoiceNumber))))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel14)
                                                .addComponent(jLabel16))
                                            .addGap(49, 49, 49)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(hsn, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(baleNumber, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel11)
                                                .addComponent(jLabel12)
                                                .addComponent(jLabel13))
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(transport, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addGap(66, 66, 66)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(mode, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(place, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(10, 10, 10)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(clearAll, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(saveAsPDF))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(cgst_sgst)
                                                    .addGap(28, 28, 28)
                                                    .addComponent(igst)
                                                    .addGap(29, 29, 29)
                                                    .addComponent(noTax))))))
                                .addGap(0, 111, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(545, 545, 545)
                                .addComponent(l, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 751, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(49, 49, 49))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(product, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(quality, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(pieces, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(metres, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(amountPerPiece, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(add)
                .addGap(18, 18, 18)
                .addComponent(clear)
                .addGap(95, 95, 95))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(billWindow)
                            .addComponent(closeButton))
                        .addGap(96, 96, 96)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(seeInvoiceNumber)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(invoiceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(invoiceDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8)))
                        .addGap(32, 32, 32)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(customerDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(hsn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(baleNumber, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(transport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(place, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(mode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cgst_sgst)
                            .addComponent(igst)
                            .addComponent(noTax))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clearAll, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(saveAsPDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 35, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(17, 17, 17)
                                        .addComponent(metres, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(17, 17, 17)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(pieces, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(product, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(quality, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(35, 35, 35)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addGap(17, 17, 17)
                                    .addComponent(amountPerPiece, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(l, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        if (addCount > 19) {
            add.setEnabled(false);
        } else {
            if (product.getText().equals("") || quality.getText().equals("") || pieces.getText().equals("") || amountPerPiece.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "You must enter all fields", "Empty Error", JOptionPane.ERROR_MESSAGE);
            } else if (!pieces.getText().matches("[0-9]+.[0-9]+") && !pieces.getText().matches("[0-9]+")) {
                JOptionPane.showMessageDialog(this, "You must enter Number in Pieces field", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            } else if (pieces.getText().matches("0+")) {
                JOptionPane.showMessageDialog(this, "You must enter Number above zero in Pieces field", "Count Error", JOptionPane.ERROR_MESSAGE);
            } else if (!amountPerPiece.getText().matches("[0-9]+.[0-9]+") && !amountPerPiece.getText().matches("[0-9]+")) {
                JOptionPane.showMessageDialog(this, "You must enter Number in Amount per piece field", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            } else if (amountPerPiece.getText().matches("0+") || amountPerPiece.getText().matches("0+.0+")) {
                JOptionPane.showMessageDialog(this, "You must enter Number above zero in Amount per piece field", "Amount Error", JOptionPane.ERROR_MESSAGE);
            } else {
                addCount++;
                df = new DecimalFormat("0.00");

                if (product.getText().toUpperCase().equals("COLLAR")
                        || product.getText().toUpperCase().equals("N/W COLLAR")
                        || product.getText().toUpperCase().equals("MICRODOT COLLAR")
                        || product.getText().toUpperCase().equals("CUFF")
                        || product.getText().toUpperCase().equals("N/W CUFF")
                        || product.getText().toUpperCase().equals("MICRODOT CUFF")) {
                    dm.addRow(new Object[]{
                        Integer.toString(addCount),
                        product.getText().toUpperCase(),
                        quality.getText().toUpperCase(),
                        pieces.getText() + " PIECES",
                        df.format(Double.valueOf(amountPerPiece.getText())),
                        "Rs. " + df.format(Double.parseDouble(amountPerPiece.getText()) * Double.parseDouble(pieces.getText()))
                    });
                    amnt[addCount - 1] = String.valueOf(Double.parseDouble(amountPerPiece.getText()) * Double.parseDouble(pieces.getText()));
                    total += Double.parseDouble(amnt[addCount - 1]);
                    totalPcs += Double.parseDouble(pieces.getText());
                    mtr[addCount - 1] = "";
                    pcs[addCount - 1] = pieces.getText();
                }
                if (product.getText().toUpperCase().equals("PATTI ROLL")
                        || product.getText().toUpperCase().equals("N/W PATTI ROLL")) {
                    dm.addRow(new Object[]{
                        Integer.toString(addCount),
                        product.getText().toUpperCase(),
                        quality.getText().toUpperCase(),
                        (Double.valueOf(pieces.getText()) * Double.valueOf(metres.getText())) + " METERS",
                        df.format(Double.valueOf(amountPerPiece.getText())),
                        "Rs. " + df.format(Double.parseDouble(amountPerPiece.getText()) * Double.parseDouble(pieces.getText()) * Double.valueOf(metres.getText()))
                    });
                    amnt[addCount - 1] = String.valueOf(Double.parseDouble(amountPerPiece.getText()) * Double.parseDouble(pieces.getText()) * Double.valueOf(metres.getText()));
                    total += Double.parseDouble(amnt[addCount - 1]);
                    totalPcs += Double.parseDouble(pieces.getText());
                    totalMtr += Double.parseDouble(metres.getText());
                    pcs[addCount - 1] = pieces.getText();
                    mtr[addCount - 1] = metres.getText();
                }
                if (product.getText().toUpperCase().equals("LONG CLOTH")
                        || product.getText().toUpperCase().equals("GADA")
                        || product.getText().toUpperCase().equals("GRAY")) {
                    dm.addRow(new Object[]{
                        Integer.toString(addCount),
                        product.getText().toUpperCase(),
                        quality.getText().toUpperCase(),
                        Double.valueOf(metres.getText()) + " METERS",
                        df.format(Double.valueOf(amountPerPiece.getText())),
                        "Rs. " + df.format(Double.parseDouble(amountPerPiece.getText()) * Double.valueOf(metres.getText()))
                    });
                    amnt[addCount - 1] = String.valueOf(Double.parseDouble(amountPerPiece.getText()) * Double.parseDouble(metres.getText()));
                    total += Double.parseDouble(amnt[addCount - 1]);
                    totalPcs += Double.parseDouble(pieces.getText());
                    totalMtr += Double.parseDouble(metres.getText());
                    pcs[addCount - 1] = pieces.getText();
                    mtr[addCount - 1] = metres.getText();
                }

                qua[addCount - 1] = quality.getText().toUpperCase();
                prod[addCount - 1] = product.getText().toUpperCase();
                rate[addCount - 1] = df.format(Double.valueOf(amountPerPiece.getText()));

                l.setText("Rs. " + df.format(total));
            }
        }
    }//GEN-LAST:event_addActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:

        product.setText("");
        quality.setText("");
        pieces.setText("");
        metres.setText("");
        amountPerPiece.setText("");

    }//GEN-LAST:event_clearActionPerformed

    private void saveAsPDFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveAsPDFMouseClicked
        // TODO add your handling code here:     

        df = new DecimalFormat("0.00");

        try {
            // Creation of new directory
            File file = new File("E:\\Invoices"); // name of the folder "Invoices" in "E" local disk
            if (!file.exists()) { // check if the folder is already exists or not
                file.mkdir(); // making file directory
            }
            //Another folder creation
            File file2 = new File("E:\\Taxless");
            if (!file2.exists()) {
                file2.mkdir();
            }

            customerName = customerDetails.getSelectedItem().toString();
            if (customerName.equals("NONE")) {
                flag = false;
                JOptionPane.showMessageDialog(this, "You must select anyone Customer", "Selection Error", JOptionPane.ERROR_MESSAGE);
            } else {
                flag = true;
            }

            if (!invoiceNumber.getText().equals("")) {
                flag1 = true;
            } else {
                flag1 = false;
                JOptionPane.showMessageDialog(this, "You must enter Invoice Number field", "Empty Error", JOptionPane.ERROR_MESSAGE);
            }
            if (invoiceDate.getDate() != null) {
                flag2 = true;
            } else {
                flag2 = false;
                JOptionPane.showMessageDialog(this, "You must enter Invoice Date field", "Empty Error", JOptionPane.ERROR_MESSAGE);
            }
            if (addCount > 0) {
                flag3 = true;
            } else {
                flag3 = false;
                JOptionPane.showMessageDialog(this, "You must add atleast one purchasing field", "Empty Purchase", JOptionPane.ERROR_MESSAGE);
            }

            if (cgst_sgst.isSelected()) {
                reader = new PdfReader("ambaltextiles/files/sample.pdf"); // Loading pdf template - without details
            }
            if (noTax.isSelected()) {
                reader = new PdfReader("ambaltextiles/files/sample3.pdf");
            }
            if (igst.isSelected()) {
                if (baleNumber.getText().equals("")) {
                    flag4 = false;
                    JOptionPane.showMessageDialog(this, "You must enter Bale Number field while selected IGST", "Empty Error", JOptionPane.ERROR_MESSAGE);
                }
                if (transport.getText().equals("")) {
                    flag5 = false;
                    JOptionPane.showMessageDialog(this, "You must enter Transport field while selected IGST", "Empty Error", JOptionPane.ERROR_MESSAGE);
                }
                if (place.getText().equals("")) {
                    flag6 = false;
                    JOptionPane.showMessageDialog(this, "You must enter Place field while selected IGST", "Empty Error", JOptionPane.ERROR_MESSAGE);
                }
                if (mode.getText().equals("")) {
                    flag7 = false;
                    JOptionPane.showMessageDialog(this, "You must enter Mode field while selected IGST", "Empty Error", JOptionPane.ERROR_MESSAGE);
                }
                if (!baleNumber.getText().equals("") && !transport.getText().equals("") && !place.getText().equals("") && !mode.getText().equals("")) {
                    flag4 = true;
                    flag5 = true;
                    flag6 = true;
                    flag7 = true;
                    reader = new PdfReader("ambaltextiles/files/sample2.pdf");
                }
            }

            if (!cgst_sgst.isSelected() && !igst.isSelected() && !noTax.isSelected()) {
                JOptionPane.showMessageDialog(null, "Select any one of the tax events");
            } else {
                if (flag && flag1 && flag2 && flag3 && flag4 && flag5 && flag6 && flag7) {

                    ddf = new DecimalFormat("0");
                    dataFunc = new DatabaseFunctions();
                    PdfStamper stamper;

                    if (!noTax.isSelected()) {
                        stamper = new PdfStamper(reader, new FileOutputStream("E:\\Invoices\\" + invoiceNumber.getText() + ".pdf")); // Output pdf - with details after overwritten 
                    } else {
                        invoiceNumber.setText("TL" + invoiceNumber.getText());
                        stamper = new PdfStamper(reader, new FileOutputStream("E:\\Taxless\\" + invoiceNumber.getText() + ".pdf")); // Output pdf - with details after overwritten 
                    }
                    BaseFont bf = BaseFont.createFont("ambaltextiles/files/consolas.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED); // font 1
                    BaseFont bfBold = BaseFont.createFont("ambaltextiles/files/consolab.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED); // font 2

                    PdfContentByte over = stamper.getOverContent(1); // stamper helps to overwrite the content on pdf template
                    // getOverContent(1) - here 1 represents first page of the pdf template

                    over.beginText(); // start to write content
                    over.setFontAndSize(bf, 11); // setting font1 for the text below

                    // position of the text starts from bottom left corner of the page as (0,0) for (x,y)
                    over.setTextMatrix(52, 695); // setting position for the text where to start
                    over.showText(customerName); // text 
                    try {
                        over.setTextMatrix(52, 680);
                        over.showText(dataFunc.getCustomerData(customerName, true, false, false, false, false, false));
                        over.setTextMatrix(52, 665);
                        over.showText(dataFunc.getCustomerData(customerName, false, true, false, false, false, false));
                        over.setTextMatrix(52, 650);
                        over.showText(dataFunc.getCustomerData(customerName, false, false, true, false, false, false));
                        over.setTextMatrix(52, 630);
                        over.showText("GSTIN      : " + dataFunc.getCustomerData(customerName, false, false, false, true, false, false));
                        over.setTextMatrix(52, 615);
                        over.showText("STATE CODE : " + dataFunc.getCustomerData(customerName, false, false, false, false, true, false));
                        over.setTextMatrix(52, 600);
                        over.showText("PHONE      : " + dataFunc.getCustomerData(customerName, false, false, false, false, false, true));
                    } catch (SQLException | ClassNotFoundException ex) {
                        // don't do anything
                    }

                    over.setTextMatrix(465, 707);
                    over.showText(invoiceNumber.getText());
                    over.setTextMatrix(465, (float) 692.5);
                    over.showText(new SimpleDateFormat("dd/MM/yyyy").format(invoiceDate.getDate()));

//                    if (igst.isSelected()) {
                        over.setTextMatrix(465, (float) 617.5);
                        over.showText(transport.getText().toUpperCase());
                        over.setTextMatrix(465, (float) 602.5);
                        over.showText(place.getText().toUpperCase());
                        over.setTextMatrix(465, (float) 587.5);
                        over.showText(mode.getText().toUpperCase());
//                    }

                    for (int i = 0, j = 550; i < addCount; i++, j -= 18) {
                        over.setTextMatrix(39, j);
                        over.showText(String.valueOf(i + 1)); // S.NO
                        over.setTextMatrix(65, j);
                        over.showText(baleNumber.getText().toUpperCase()); // BALE NUMBER
                        over.setTextMatrix(119, j);
                        over.showText(qua[i] + " " + prod[i]); // QUALITY & PRODUCT
                        over.setTextMatrix(310, j);
                        over.showText(hsn.getText()); // HSN
                        over.setTextMatrix(360, j);
                        over.showText(pcs[i]); // PIECES
                        over.setTextMatrix(410, j);
                        over.showText(mtr[i]); // METERS
                        over.setTextMatrix(462, j);
                        over.showText(rate[i]); // RATE
                        over.setTextMatrix(507, j);
                        over.showText(df.format(Double.valueOf(amnt[i]))); // AMOUNT
                    }

                    over.setTextMatrix(358, 188);
                    over.showText(String.valueOf(ddf.format(totalPcs))); // TOTAL PIECES
                    over.setTextMatrix(408, 188);
                    over.showText(String.valueOf(totalMtr)); // TOTAL METERS
                    over.setTextMatrix(503, 188);
                    over.showText(String.valueOf(df.format(total))); // GROSS TOTAL

                    if (!noTax.isSelected()) {
                        over.setTextMatrix(503, 146);
                        over.showText(String.valueOf(df.format(total))); // GROSS TOTAL
                        try {
                            dataFunc.updateInvoiceNumber(invoiceNumber.getText());
                        } catch (SQLException | ClassNotFoundException ex) {
                            // don't do anything
                        }
                    } else {
                        netAmount = total;
                        try {
                            dataFunc.updateInvoiceNumberTaxless(invoiceNumber.getText());
                        } catch (SQLException | ClassNotFoundException ex) {
                            // don't do anything
                        }
                    }

                    if (cgst_sgst.isSelected()) {
                        cgstAmount = (Double) (2.5 * total) / 100;
                        sgstAmount = (Double) (2.5 * total) / 100;
                        over.setTextMatrix(509, 129);
                        over.showText(df.format(cgstAmount)); // CGST
                        over.setTextMatrix(509, (float) 112.25);
                        over.showText(df.format(sgstAmount)); // SGST
                        netAmount = total + cgstAmount + sgstAmount;
                    }
                    if (igst.isSelected()) {
                        igstAmount = (Double) (5 * total) / 100;
                        over.setTextMatrix(509, 129);
                        over.showText(df.format(igstAmount)); // IGST
                        netAmount = total + igstAmount;
                    }

                    over.setFontAndSize(bfBold, 11);
                    over.setTextMatrix(503, 89);
                    over.showText(df.format(Math.round(netAmount))); // ROUNDED OFF - NET TOTAL

                    over.setFontAndSize(bf, 11);
                    over.setTextMatrix(77, (float) 169.5);
                    over.showText(new NumbersToWords().conversion(ddf.format(netAmount))); // AMOUNT IN WORDS

                    over.endText();

                    stamper.close();

                    try {
                        // inserting sales details in payments list
                        dataFunc.insertPaymentDetails(
                                customerName,
                                new SimpleDateFormat("dd/MM/yyyy").format(invoiceDate.getDate()),
                                invoiceNumber.getText(),
                                "Sales Bill",
                                "Sales",
                                df.format(Math.round(netAmount)),
                                "0");
                    } catch (SQLException | ClassNotFoundException ex) {
                        // don't do anything
                    }

                    JOptionPane.showMessageDialog(null, "Bill Saved");
                }
            }
        } catch (DocumentException | IOException ex) {
            // don't do anything
        }

    }//GEN-LAST:event_saveAsPDFMouseClicked

    private void closeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseClicked
        // TODO add your handling code here:
        if (isDisplayable()) {
            int flag = JOptionPane.showConfirmDialog(this, "Do you want to close the window ?");
            if (flag == JOptionPane.YES_OPTION) {
                dispose(); // To close this frame
            }
        }
    }//GEN-LAST:event_closeButtonMouseClicked

    private void seeInvoiceNumberMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seeInvoiceNumberMouseClicked
        try {
            // TODO add your handling code here:
            dataFunc = new DatabaseFunctions();
            JOptionPane.showMessageDialog(this, "Last Invoice Number (TAX) : " + dataFunc.findInvoiceNumber() + "\nLast Invoice Number (TAXLESS) : " + dataFunc.findInvoiceNumberTaxless(), "INVOICE NUMBER", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException | ClassNotFoundException ex) {
            // don't do anything
        }
    }//GEN-LAST:event_seeInvoiceNumberMouseClicked

    private void searchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseClicked
        // TODO add your handling code here:
        try {
            dataFunc = new DatabaseFunctions();
            ArrayList<String> al = dataFunc.findCustomersWithSearchLetters(searchText.getText().toUpperCase());
            String[] strs = new String[al.size() + 1];
            strs[0] = "NONE";
            int i = 1;
            for (String s : al) {
                strs[i] = s;
                i++;
            }
            customerDetails.setModel(new DefaultComboBoxModel(strs));
        } catch (SQLException | ClassNotFoundException ex) {
            // don't do anything
        }
    }//GEN-LAST:event_searchButtonMouseClicked

    private void clearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllActionPerformed
        // TODO add your handling code here:

        while (dm.getRowCount() > 0) {
            dm.removeRow(0);
        }
        
        int i = 0;
        while(i < addCount){
            amnt[i] = null;
            mtr[i] = null;
            pcs[i] = null;
            qua[i] = null;
            prod[i] = null;
            rate[i] = null;
            i++;    
        }
        
        total = 0.00;
        totalPcs = 0.00;
        totalMtr = 0.00;
        addCount = 0;
        
        product.setText("");
        quality.setText("");
        pieces.setText("");
        metres.setText("");
        amountPerPiece.setText("");
        
        l.setText("Rs. " + df.format(total));

        invoiceNumber.setText("");
        invoiceDate.setDate(null);
        searchText.setText("");

        String[] strs = {""};
        customerDetails.setModel(new DefaultComboBoxModel(strs));

        hsn.setText("");
        baleNumber.setText("");
        transport.setText("");
        place.setText("");
        mode.setText("");
        bg.clearSelection();

    }//GEN-LAST:event_clearAllActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Bill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Bill().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JTextField amountPerPiece;
    private javax.swing.JTextField baleNumber;
    private javax.swing.JLabel billWindow;
    private javax.swing.JRadioButton cgst_sgst;
    private javax.swing.JButton clear;
    private javax.swing.JButton clearAll;
    private javax.swing.JLabel closeButton;
    private javax.swing.JComboBox<String> customerDetails;
    private javax.swing.JTextField hsn;
    private javax.swing.JRadioButton igst;
    private org.jdesktop.swingx.JXDatePicker invoiceDate;
    private javax.swing.JTextField invoiceNumber;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel l;
    private javax.swing.JTextField metres;
    private javax.swing.JTextField mode;
    private javax.swing.JRadioButton noTax;
    private javax.swing.JTextField pieces;
    private javax.swing.JTextField place;
    private javax.swing.JTextField product;
    private javax.swing.JTextField quality;
    private javax.swing.JLabel saveAsPDF;
    private javax.swing.JLabel searchButton;
    private javax.swing.JTextField searchText;
    private javax.swing.JLabel seeInvoiceNumber;
    private javax.swing.JTable table;
    private javax.swing.JTextField transport;
    // End of variables declaration//GEN-END:variables
}
